/// <reference no-default-lib="true" />
/// <reference lib="es5" />
/// <reference lib="dom" />

export function className(argc: any): string;
export function fromCharCode(argc: ReadonlyArray<number>): string;
export function sliceArguments<T>(argc: ArrayLike<T>, start: number, flatten: true, compact: true): FlatArray<NonNullable<T>[], 20>[];
export function sliceArguments<T>(argc: ArrayLike<T>, start: number, flatten: true, compact?: boolean): FlatArray<T[], 20>[];
export function sliceArguments<T>(argc: ArrayLike<T>, start?: number, flatten?: boolean, compact?: boolean): Array<T>;
export function setPrototypeOf<T>(argc: T, prototype?: object | null): T;
export function createInstance<T, P extends PropertyDescriptorMap = {}>(argc: Hml.Proto<T>, properties?: P): T & Hml.PropertyDescriptorMapReturns<P>;
export function hasOwnProperty(argc: any, property: PropertyKey): boolean;
export function defineProperty<T, N extends PropertyKey, P extends PropertyDescriptor>(argc: T, property: N, descriptor: P): T & { [K in N]: Hml.PropertyDescriptorReturns<P>; };
export function defineProperties<T, P extends PropertyDescriptorMap>(argc: T, properties: P): T & Hml.PropertyDescriptorMapReturns<P>;
export function skrinkSerializer<T extends Hml.FuncBasic>(constructor: T): T;
export function divideExpression(argc: string): Array<string | number>;
export function getOwnPropertyDescriptors(argc: any): PropertyDescriptorMap;
export function generateNormalDescriptor<T>(argc: T, enumerable?: boolean): Hml.NormalPropertyDescriptor<T>;
export function generateGetterDescriptor<T>(argc: Hml.NoParametersFunc<T>, enumerable?: boolean): Hml.GetterPropertyDescriptor<T>;
export function generateMethodDescriptor<T extends Hml.FuncBasic>(argc: T, enumerable?: boolean): Hml.NormalPropertyDescriptor<T>;
export function generatePropertyExpr(description: string): PropertyKey[];
export function generateClass<T extends Hml.FuncBasic, P extends PropertyDescriptorMap, S extends Hml.Proto<any>>(constructor: T, properties: P, superClass: S): Hml.FuncClass<Hml.Parameters<T>, Hml.InstanceType<T> & Hml.PropertyDescriptorMapReturns<P> & Hml.InstanceType<S>>;
export function bitConvert(argc: ReadonlyArray<number>, sourceBit: number, targetBit: number): ReadonlyArray<number>;
export function decodeBase(argc: string): ReadonlyArray<number>;
export function encodeBase(argc: ReadonlyArray<number>): string;
export function decodeUTF8(argc: ReadonlyArray<number>): string;
export function encodeUTF8(argc: string): ReadonlyArray<number>;

export const has: typeof Hml.has;
export const get: typeof Hml.get;
export const set: typeof Hml.set;
export const keys: typeof Hml.keys;
export const values: typeof Hml.values;
export const uuid: typeof Hml.uuid;
export const hash: typeof Hml.hash;
export const atob: typeof Hml.atob;
export const btoa: typeof Hml.btoa;
export const glob: typeof Hml.glob;
export const uniq: typeof Hml.uniq;
export const omit: typeof Hml.omit;
export const pick: typeof Hml.pick;
export const clone: typeof Hml.clone;
export const merge: typeof Hml.merge;
export const defaults: typeof Hml.defaults;
export const isArray: typeof Hml.isArray;
export const isClass: typeof Hml.isClass;
export const isNumber: typeof Hml.isNumber;
export const isString: typeof Hml.isString;
export const isBoolean: typeof Hml.isBoolean;
export const isFunction: typeof Hml.isFunction;
export const isBigInt: typeof Hml.isBigInt;
export const isSymbol: typeof Hml.isSymbol;
export const isObject: typeof Hml.isObject;
export const isInstanceOf: typeof Hml.isInstanceOf;
export const isDataView: typeof Hml.isDataView;
export const isFormData: typeof Hml.isFormData;
export const isBuffer: typeof Hml.isBuffer;
export const isRegExp: typeof Hml.isRegExp;
export const isDate: typeof Hml.isDate;
export const isNull: typeof Hml.isNull;
export const isUndefined: typeof Hml.isUndefined;
export const isNullOrUndefined: typeof Hml.isNullOrUndefined;
export const isNullOrEmptyString: typeof Hml.isNullOrEmptyString;
export const isNullOrEmptyObject: typeof Hml.isNullOrEmptyObject;
export const isBasic: typeof Hml.isBasic;
export const isEqual: typeof Hml.isEqual;
export const isValid: typeof Hml.isValid;

export const NULL: null;
export const VOID: undefined;
export const BASE: Hml.NoParametersFunc<never>;
export const MEAN: Hml.NoParametersFunc<never>;
export const NOOP: Hml.NoParametersFunc<void>;

export const UNDEFINED: "undefined";

export const __global__: typeof global;
export const __window__: typeof window;
export const globalThis: typeof global.globalThis;

export const localStorage: Storage;
export const navigator: Navigator;
export const document: Document;
export const location: Location;
export const history: History;
export const console: Console;
export const process: NodeJS.Process;

export const JSON: JSON;
export const Math: Math;
export const Date: DateConstructor;
export const Array: ArrayConstructor;
export const Error: ErrorConstructor;
export const Number: NumberConstructor;
export const String: StringConstructor;
export const Boolean: BooleanConstructor;
export const Function: FunctionConstructor;
export const RegExp: RegExpConstructor;
export const Object: ObjectConstructor;
export const Symbol: SymbolConstructor;
export const Buffer: BufferConstructor;
export const Event: typeof globalThis.Event;
export const isNaN: typeof globalThis.isNaN;
export const isFinite: typeof globalThis.isFinite;
export const parseInt: typeof globalThis.parseInt;
export const setTimeout: typeof globalThis.setTimeout;
export const setInterval: typeof globalThis.setInterval;
export const setImmediate: typeof globalThis.setImmediate;
export const clearTimeout: typeof globalThis.clearTimeout;
export const clearInterval: typeof globalThis.clearInterval;
export const clearImmediate: typeof globalThis.clearImmediate;
export const decodeURIComponent: typeof globalThis.decodeURIComponent;
export const encodeURIComponent: typeof globalThis.encodeURIComponent;
export const unescape: typeof globalThis.unescape;
export const escape: typeof globalThis.escape;

export const fs: typeof import("fs");
export const path: typeof import("path");
export const zlib: typeof import("zlib");
export const http: typeof import("http");
export const https: typeof import("https");
export const crypto: typeof import("crypto");
export const stream: typeof import("stream");
export const acorn_core: typeof import("acorn");
export const acorn_walk: typeof import("acorn-walk");
export const typescript: typeof import("typescript");

export const BR: "br";
export const GZIP: "gzip";
export const DEFLATE: "deflate";

export const HEX: "hex";
export const SHA1: "sha1";
export const UTF8: "utf8";
export const ASCII: "ascii";
export const BASE64: "base64";

export const PENDING: "pending";
export const REJECTED: "rejected";
export const RESOLVED: "fulfilled";

export const X_REAL_IP: "X-Real-IP";
export const X_RESPONSE_URL: "X-Response-Url";
export const X_REQUESTED_WITH: "X-Requested-With";
export const X_FORWARDED_HOST: "X-Forwarded-Host";
export const X_FORWARDED_PROTO: "X-Forwarded-Proto";

export const FORMAT_BYTE_CONTENT: "application/octet-stream";
export const FORMAT_FORM_CONTENT: "application/x-www-form-urlencoded";
export const FORMAT_JSON_CONTENT: "application/json";
export const FORMAT_MULT_CONTENT: "multipart/form-data";

export const HEADER_ACCEPT_RANGES: "Accept-Ranges";
export const HEADER_ACCEPT_ENCODING: "Accept-Encoding";
export const HEADER_ACCEPT_LANGUAGE: "Accept-Language";
export const HEADER_ACCESS_CONTROL_ALLOW_CREDENTIALS: "Access-Control-Allow-Credentials";
export const HEADER_ACCESS_CONTROL_ALLOW_HEADERS: "Access-Control-Allow-Headers";
export const HEADER_ACCESS_CONTROL_ALLOW_METHODS: "Access-Control-Allow-Methods";
export const HEADER_ACCESS_CONTROL_ALLOW_ORIGIN: "Access-Control-Allow-Origin";
export const HEADER_ACCESS_CONTROL_MAX_AGE: "Access-Control-Max-Age";
export const HEADER_CONTENT_DISPOSITION: "Content-Disposition";
export const HEADER_CONTENT_ENCODING: "Content-Encoding";
export const HEADER_CONTENT_LENGTH: "Content-Length";
export const HEADER_CONTENT_RANGE: "Content-Range";
export const HEADER_CONTENT_TYPE: "Content-Type";
export const HEADER_IF_NONE_MATCH: "If-None-Match";
export const HEADER_IF_MODIFIED_SINCE: "If-Modified-Since";
export const HEADER_WWW_AUTHENTICATE: "WWW-Authenticate";
export const HEADER_CACHE_CONTROL: "Cache-Control";
export const HEADER_LAST_MODIFIED: "Last-Modified";
export const HEADER_LOCATION: "Location";
export const HEADER_EXPIRES: "Expires";
export const HEADER_COOKIE: "Cookie";
export const HEADER_ORIGIN: "Origin";
export const HEADER_RANGE: "Range";
export const HEADER_ETAG: "Etag";
export const HEADER_HOST: "Host";

export const CSRF_IDENT: string;
export const HTTP_IDENT: string;
export const ATOB_CHARS: ReadonlyArray<number>;
export const BTOA_CHARS: string;

export const DEFAULT_PROTOCOL: string;
export const DEFAULT_HOSTNAME: string;
export const PHASE_CAPTURING: number;
export const PHASE_AT_TARGET: number;
export const PHASE_BUBBLING: number;
export const DEVELOPMENT: boolean;
export const BEHAVIOR: boolean;
export const PASSIVE: boolean;

export const REQ: PropertyKey[];
export const RES: PropertyKey[];
export const BODY: PropertyKey[];
export const HOST: PropertyKey[];
export const RANGE: PropertyKey[];
export const METHOD: PropertyKey[];
export const SEARCH: PropertyKey[];
export const LENGTH: PropertyKey[];
export const ORIGIN: PropertyKey[];
export const ADDRESS: PropertyKey[];
export const COOKIES: PropertyKey[];
export const HEADERS: PropertyKey[];
export const PATHNAME: PropertyKey[];
export const PROTOCOL: PropertyKey[];
export const MIMETYPE: PropertyKey[];
export const BOUNDARY: PropertyKey[];
export const ENCODING: PropertyKey[];
export const LANGUAGE: PropertyKey[];
export const LOCATION: PropertyKey[];
export const INSTANCE: PropertyKey[];
export const SETTINGS: PropertyKey[];
export const CONSTRUCT: PropertyKey[];
export const EVENT_CAPTURE: PropertyKey[];
export const EVENT_GENERAL: PropertyKey[];
export const EVENT_OBSERVE: PropertyKey[];
export const STOP_AFTERWARD: PropertyKey[];
export const STOP_IMMEDIATE: PropertyKey[];
export const TICK_PREVENTED: PropertyKey[];
export const STATE: PropertyKey[];
export const VALUE: PropertyKey[];
export const THROW: PropertyKey[];
export const QUEUE: PropertyKey[];